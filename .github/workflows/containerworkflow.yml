name: Container Workflow
on:
  workflow_dispatch:

env:
  ACR_LOGON_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:${{ github.sha }}
  #IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:$(date +%Y%m%d).$BUILD_NUMBER => (20221128.1, 20221128.2, 20221128.3)
  #IMAGE_NAME: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:$(date +%Y%m%d).$BUILD_NUMBER-$(env.PROD.ENV_NAME) => (20221128.1-PROD, 20221128.2-DEV, 20221128.3-STAGING)
  IMAGE_NAME1: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:${{ secrets.RANDOM_NAME1 }}
  IMAGE_NAME2: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:${{ secrets.RANDOM_NAME2 }}
  IMAGE_NAME3: ${{ secrets.ACR_NAME }}.azurecr.io/webapp:${{ secrets.RANDOM_NAME3 }}
  

jobs:
    build-deploy-image:
        
        runs-on: ubuntu-latest
        
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
       
          
        - name: 'Build and push image'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ env.ACR_LOGON_SERVER }}
            username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
            password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
            
          # Semantic version R&D  
        - name: Get lowercase repository name
          run: |
            echo "IMAGE=${REPOSITORY,,}">>${GITHUB_ENV}
          env:
            REPOSITORY: ${{ env.REGISTRY }}/${{ github.repository }}
             echo ${{ env.IMAGE }}:${{ secrets.MAJOR }}.${{ secrets.MINOR }}
             
        - name: Autoincrement a new patch version
          run: |
            echo "NEW_PATCH_VERSION=$((${{ env.PATCH_VERSION }}+1))" >> $GITHUB_ENV
        #- name: Update patch version
        #  uses: hmanzur/actions-set-secret@v2.0.0
        #  with:
        #    name: 'PATCH_VERSION'
        #    value: ${{ env.NEW_PATCH_VERSION }}
        #    repository: ${{ github.repository }}
        #    token: ${{ secrets.GITHUB_TOKEN }}
        #  ------------------------------------------------------

        #- run: docker build . -t ${{ env.IMAGE_NAME }}
        #- run: docker push ${{ env.IMAGE_NAME }}
        
        - name: Build and push container image to registry
          uses: docker/build-push-action@v2
          with:
            push: true
            tags: |
             ${{ env.IMAGE_NAME2 }}
            file: dockerimagetagging/Dockerfile
            context: ./
    
    deploy-to-aks:
      
      runs-on: ubuntu-latest
      
      if: github.ref == 'refs/heads/main'

      needs: build-deploy-image
      environment: PROD
          
      #env:
        #NAMESPACE: dummy
      
      steps:
      
      - uses: actions/checkout@main
      
      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ secrets.AKS_NAME }}
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
    
      # Create namespace if doesn't exist
      # - run: |
      #    kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
    
      # Create image pull secret for ACR
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.ACR_LOGON_SERVER }}
          container-registry-username: ${{ secrets.SERVICE_PRINCIPAL_ID }}
          container-registry-password: ${{ secrets.SERVICE_PRINCIPAL_PASSWORD }}
          secret-name: ${{ secrets.AKS_SECRET }}
          # namespace: ${{ env.NAMESPACE }}
    
      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            dockerimagetagging/manifests/deployment.yml
            dockerimagetagging/manifests/service.yml
          images: |
            ${{ env.IMAGE_NAME2 }}
          imagepullsecrets: |
            ${{ secrets.AKS_SECRET }}
          #namespace: ${{ env.NAMESPACE }}
